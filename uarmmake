# Credit to Marco Maldini
# Cross toolchain variables
# If these are not in your path, you can make them absolute.
XT_PRG_PREFIX = arm-none-eabi-
CC = $(XT_PRG_PREFIX)gcc
LD = $(XT_PRG_PREFIX)ld

# uARM-related paths
UARM_DIR = ./uarm
INCLUDE_DIR = ./include
SOURCE_DIR = ./src

# Compiler options
CFLAGS_LANG = 
CFLAGS_UARM = -mcpu=arm7tdmi -DTARGET_UARM=1
CFLAGS = $(CFLAGS_LANG) $(CFLAGS_UARM) -I$(UARM_DIR) -I$(UARM_DIR)/uarm -I$(INCLUDE_DIR) -I$(INCLUDE_DIR)/asl -I$(INCLUDE_DIR)/pcb -I$(INCLUDE_DIR)/system -Wall -O0

# Linker options
LDFLAGS = -G 0 -nostdlib -T $(UARM_DIR)/elf32ltsarm.h.uarmcore.x

# Add the location of crt*.S to the search path
VPATH = $(UARM_DIR)

.PHONY : all clean

all : kernel

kernel : $(SOURCE_DIR)/pcb/pcb.o $(SOURCE_DIR)/asl/asl.o $(SOURCE_DIR)/p1test_bikaya_v0.o crtso.o libuarm.o
	$(LD) -o $@ $^ $(LDFLAGS)

clean :
	-rm -f $(SOURCE_DIR)/pcb/*.o $(SOURCE_DIR)/asl/*.o $(SOURCE_DIR)/*.o *.o kernel kernel.*.uarm

# Pattern rule for assembly modules
%.o : %.s
	$(CC) $(CFLAGS) -c -o $@ $<
